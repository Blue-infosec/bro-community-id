module CommunityID;

%%{
#include "digest.h"
#include "Base64.h"

// For access to the one-way flow determination logic
#include "analyzer/protocol/icmp/ICMP.h"

// Wrapper around sha1_update() that optionally also prints the hashed
// data, and returns the number of bytes provided.
static int sha1_update_logger(SHA_CTX* ctx, const void* data,
                               unsigned long len, bool verbose=false) {
    if (verbose) {
        for (unsigned long i = 0; i < len; i++) {
            const char *sep = i < len-1 ? ":" : "";
            printf("%02x%s", ((unsigned char*)data)[i], sep);
        }

        printf(" ");
    }

    sha1_update(ctx, data, len);

    return len;
}
%%}

function hash_conn%(conn: connection%): string
%{
    bro_uint_t comm_id_seed = 0;
    bool do_base64 = true;
    bool verbose = false;
    ID *id = 0;

    if ( (id = global_scope()->Lookup("CommunityID::seed"))) {
        comm_id_seed = id->ID_Val()->AsCount();
    } else {
        builtin_error("CommunityID: seed value not retrievable from policy layer");
    }

    if ( (id = global_scope()->Lookup("CommunityID::do_base64"))) {
        do_base64 = id->ID_Val()->AsBool();
    } else {
        builtin_error("CommunityID: base64 usage flag not retrievable from policy layer");
    }

    if ( (id = global_scope()->Lookup("CommunityID::verbose"))) {
        verbose = id->ID_Val()->AsBool();
    }

    // The connection properties, ordered as we hash them:
    uint16 hash_seed = 0;
    const uint32 *hash_src_addr = 0;
    const uint32 *hash_dst_addr = 0;
    uint8 hash_proto = 0;
    uint8 hash_padbyte = 0;
    uint16 hash_src_port = 0;
    uint16 hash_dst_port = 0;

    hash_seed = htons(comm_id_seed);
    bool is_ipv4 = conn->OrigAddr().GetBytes(&hash_src_addr) == 1;
    conn->RespAddr().GetBytes(&hash_dst_addr);
    TransportProto proto = conn->ConnTransport();

    // Bro's transport protocol aliases different underlying
    // protocols, particularly IPv4's and v6's ICMP...
    switch (proto) {
        case TRANSPORT_TCP:
            hash_proto = IPPROTO_TCP;
            break;
        case TRANSPORT_UDP:
            hash_proto = IPPROTO_UDP;
            break;
        case TRANSPORT_ICMP:
            hash_proto = is_ipv4 ? IPPROTO_ICMP : IPPROTO_ICMPV6;
            break;
        case TRANSPORT_UNKNOWN:
            builtin_error("CommunityID: unknown transport layer", conn);
            return new StringVal("");
        default:
            builtin_error("CommunityID: unhandled transport layer", conn);
            return new StringVal("");
    }

    hash_src_port = (uint16) conn->OrigPort(); // Already in NBO
    hash_dst_port = (uint16) conn->RespPort();

    // Some trickiness. The community flow hash value needs to be the
    // same regardless of the directionality of the flow, to the
    // extent that the notion of directionality applies to the
    // flow. The connection's originator-responder pairing may violate
    // that directionality, so we need to normalize, much like we've
    // already done in NetSessions::FindConnection when we first
    // created the connection state. Unfortunately the connection
    // object misses the is_one_way bit that NetSessions::FindConnection()
    // maintains in its local ConnID instance. This case currently
    // only matters for ICMP, so we duplicate the logic here.
    //
    // XXX: resolve whether we should copy is_one_way into the
    // Connection instance at construction time, along with the other
    // ConnID fields (see Conn.cc around line 125).

    bool is_one_way = false;

    if (TRANSPORT_ICMP == proto) {
        if (is_ipv4)
            analyzer::icmp::ICMP4_counterpart(ntohs(hash_src_port),
                                              ntohs(hash_dst_port),
                                              is_one_way);
        else
            analyzer::icmp::ICMP6_counterpart(ntohs(hash_src_port),
                                              ntohs(hash_dst_port),
                                              is_one_way);
    }

    if (is_one_way || addr_port_canon_lt(conn->OrigAddr(), conn->OrigPort(),
                                         conn->RespAddr(), conn->RespPort())) {
        // All good, no need to flip
    } else {
        // Need to flip endpoints for hashing.
        std::swap(hash_src_addr, hash_dst_addr);
        std::swap(hash_src_port, hash_dst_port);
    }

    SHA_CTX ctx;
    u_char digest[SHA_DIGEST_LENGTH];
    int dlen = 0;

    sha1_init(&ctx);

    dlen += sha1_update_logger(&ctx, &hash_seed, 2, verbose);
    dlen += sha1_update_logger(&ctx, hash_src_addr, is_ipv4 ? 4 : 16, verbose);
    dlen += sha1_update_logger(&ctx, hash_dst_addr, is_ipv4 ? 4 : 16, verbose);
    dlen += sha1_update_logger(&ctx, &hash_proto, 1, verbose);
    dlen += sha1_update_logger(&ctx, &hash_padbyte, 1, verbose);
    dlen += sha1_update_logger(&ctx, &hash_src_port, 2, verbose);
    dlen += sha1_update_logger(&ctx, &hash_dst_port, 2, verbose);

    sha1_final(&ctx, digest);

    // We currently have no real versioning/hash configuration logic,
    // so we simply prefix "1:" to the hash.
    string ver("1:");
    StringVal *res = 0;

    if (do_base64) {
        char *outbuf = 0;
        int outlen = 0;

        Base64Converter enc(conn);
        enc.Encode(SHA_DIGEST_LENGTH, digest, &outlen, &outbuf);
        res = new StringVal(ver + string(outbuf, outlen));
    } else {
        const char *ascii_digest = sha1_digest_print(digest);
        res = new StringVal(ver + ascii_digest);
    }

    if (verbose)
        printf("(%d bytes) -> %s\n", dlen, res->Bytes());

    return res;
%}
